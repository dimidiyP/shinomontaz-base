name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create backup and deploy
      run: |
        ssh -o StrictHostKeyChecking=no root@83.222.18.104 '
          cd /opt/shinomontaz &&
          
          # Create backup directory if not exists
          mkdir -p /opt/backups &&
          mkdir -p /opt/test-reports &&
          
          # Create timestamped backup
          BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)" &&
          echo "Creating backup: $BACKUP_NAME" &&
          
          # Stop services before backup
          docker-compose down --remove-orphans || true &&
          
          # Force cleanup any remaining containers using ports 80, 443
          docker ps -q --filter "publish=80" | xargs -r docker stop || true &&
          docker ps -q --filter "publish=443" | xargs -r docker stop || true &&
          docker system prune -f || true &&
          
          # Create full backup
          tar -czf "/opt/backups/$BACKUP_NAME.tar.gz" \
            --exclude="node_modules" \
            --exclude=".git" \
            --exclude="*.log" \
            --exclude="test-reports" \
            /opt/shinomontaz &&
          
          # Keep only last 5 backups
          cd /opt/backups &&
          ls -t backup_*.tar.gz | tail -n +6 | xargs -r rm &&
          
          # Return to project directory
          cd /opt/shinomontaz &&
          
          # Configure git for clean pull
          git config pull.rebase false &&
          git fetch origin &&
          git reset --hard origin/main &&
          
          # Build and deploy
          docker-compose build --no-cache &&
          
          # Final port cleanup before starting
          echo "Checking for port conflicts..." &&
          docker ps -q --filter "publish=80" | xargs -r docker stop || true &&
          docker ps -q --filter "publish=443" | xargs -r docker stop || true &&
          
          docker-compose up -d &&
          docker system prune -f &&
          
          echo "Deployment completed. Backup saved as: $BACKUP_NAME.tar.gz"
        '

    - name: Wait for services to start
      run: |
        sleep 60
        echo "‚è≥ Waiting for services to be ready..."

    - name: Run backend health check
      run: |
        echo "üîç Testing backend health..."
        curl -f https://baseshinomontaz.ru/api/health || exit 1
        echo "‚úÖ Backend is healthy"

    - name: Run quick frontend tests
      continue-on-error: true
      run: |
        ssh -o StrictHostKeyChecking=no root@83.222.18.104 '
          cd /opt/shinomontaz/tests &&
          
          # Install Node.js and npm if not present
          if ! command -v npm &> /dev/null; then
            echo "üì¶ Installing Node.js and npm..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install -y nodejs
          fi &&
          
          # Install test dependencies if not present
          if [ ! -d "node_modules" ]; then
            echo "üì¶ Installing test dependencies..."
            npm install || {
              echo "‚ö†Ô∏è Failed to install test dependencies, skipping tests"
              exit 0
            }
          fi &&
          
          # Update run-tests.sh to use npm instead of yarn
          if grep -q "yarn install" run-tests.sh; then
            sed -i "s/yarn install/npm install/g" run-tests.sh
          fi &&
          
          # Run quick smoke tests
          echo "üß™ Running quick frontend tests..." &&
          timeout 300 ./run-tests.sh production quick || {
            echo "‚ö†Ô∏è Frontend tests failed or timed out, but continuing deployment"
            exit 0
          } &&
          
          echo "‚úÖ Quick tests completed"
        '

    - name: Full health check
      run: |
        # Test multiple endpoints
        curl -f http://baseshinomontaz.ru/ || curl -f https://baseshinomontaz.ru/api/health || exit 1

    - name: Rollback on failure
      if: failure()
      run: |
        ssh -o StrictHostKeyChecking=no root@83.222.18.104 '
          cd /opt/shinomontaz &&
          echo "‚ùå Deployment failed! Starting rollback..." &&
          
          # Stop current containers
          docker-compose down &&
          
          # Get latest backup
          LATEST_BACKUP=$(ls -t /opt/backups/backup_*.tar.gz | head -1) &&
          
          if [ -n "$LATEST_BACKUP" ]; then
            echo "Rolling back to: $LATEST_BACKUP" &&
            
            # Extract backup
            cd / &&
            tar -xzf "$LATEST_BACKUP" &&
            
            # Restart services
            cd /opt/shinomontaz &&
            docker-compose up -d &&
            
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No backup found for rollback!"
          fi
        '

    - name: Notify success
      if: success()
      run: echo "‚úÖ Deployment successful with automated testing!"

    - name: Notify failure
      if: failure()
      run: echo "‚ùå Deployment failed and rollback attempted!"

  # Separate job for comprehensive testing (optional)
  comprehensive-tests:
    name: Comprehensive Frontend Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success() && github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Run comprehensive tests
      run: |
        ssh -o StrictHostKeyChecking=no root@83.222.18.104 '
          cd /opt/shinomontaz/tests &&
          
          echo "üß™ Running comprehensive frontend tests..." &&
          ./run-tests.sh production all &&
          
          echo "‚úÖ Comprehensive tests completed"
        '